/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package system;

import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class PropertyImages extends javax.swing.JFrame {

    /**
     * Creates new form PropertyImages
     */
    
    P_Type type = new P_Type();
    HashMap<String, Integer> map = type.getTypesMap();
    String propertyImagePath = "";
    int propertyId = 0;
    
    public PropertyImages() {
        initComponents();
        
        //set border to the title
        Border title = BorderFactory.createMatteBorder(0,0,3,0, new Color(102,102,102));
        pnltitle.setBorder(title);
        
        //set a border to the image label
        Border imageLabel = BorderFactory.createMatteBorder(1,1,1,1, new Color(255,255,255));
        lblimage.setBorder(imageLabel);
       
        //populate the combobox with type name
        bindCombo();
        
        //populate the table with all properties
        fillTableProperties();
        
    }
    
    //create a function to populate the combo box with types
    public void bindCombo()
    {
        for(String s : map.keySet())
        {
            cmbtype.addItem(s);
        }
    }
    
    //create a function to populate the table
    public void fillTableProperties(){
        
        P_Properties property = new P_Properties();
        ArrayList<P_Properties> propertyList = property.propertyList();
        
        //table columns
        String[] colNames = {"ID", "Address"};
        
        //table rows
        //propertyList.size() = size of the arraylist
        Object[][] rows = new Object[propertyList.size()][2];
        
        for(int i = 0; i<propertyList.size(); i++)
        {
            rows[i][0] = propertyList.get(i).getId();
            rows[i][1] = propertyList.get(i).getAddress();

            
        }
        
        DefaultTableModel model = new DefaultTableModel(rows,colNames);
        tblproperties.setModel(model);
        
        tblproperties.setRowHeight(25);
        tblproperties.setSelectionBackground(new Color(0,102,255));
        tblproperties.getColumnModel().getColumn(0).setPreferredWidth(25);
        tblproperties.getColumnModel().getColumn(1).setPreferredWidth(250);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnltitle = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnShowImages = new javax.swing.JButton();
        btnRemoveImage = new javax.swing.JButton();
        btnAddImage = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbtype = new javax.swing.JComboBox<>();
        btnBrowse = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblproperties = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstimages = new javax.swing.JList<>();
        lblimage = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        pnltitle.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Property Images");

        javax.swing.GroupLayout pnltitleLayout = new javax.swing.GroupLayout(pnltitle);
        pnltitle.setLayout(pnltitleLayout);
        pnltitleLayout.setHorizontalGroup(
            pnltitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnltitleLayout.createSequentialGroup()
                .addGap(405, 405, 405)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnltitleLayout.setVerticalGroup(
            pnltitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnltitleLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        btnShowImages.setBackground(new java.awt.Color(0, 153, 0));
        btnShowImages.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnShowImages.setForeground(new java.awt.Color(255, 255, 255));
        btnShowImages.setText("Show Property Images");
        btnShowImages.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnShowImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowImagesActionPerformed(evt);
            }
        });

        btnRemoveImage.setBackground(new java.awt.Color(255, 0, 0));
        btnRemoveImage.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveImage.setForeground(new java.awt.Color(255, 255, 255));
        btnRemoveImage.setText("Remove Image");
        btnRemoveImage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRemoveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveImageActionPerformed(evt);
            }
        });

        btnAddImage.setBackground(new java.awt.Color(51, 51, 255));
        btnAddImage.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddImage.setForeground(new java.awt.Color(255, 255, 255));
        btnAddImage.setText("Add Image");
        btnAddImage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddImageActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Select Image :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Select a Type :");

        cmbtype.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbtype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbtypeActionPerformed(evt);
            }
        });

        btnBrowse.setBackground(new java.awt.Color(255, 255, 204));
        btnBrowse.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBrowse.setText("browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        tblproperties.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblproperties.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblpropertiesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblproperties);

        lstimages.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lstimages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstimagesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lstimages);

        lblimage.setBackground(new java.awt.Color(255, 204, 204));
        lblimage.setOpaque(true);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("*the table contains the properties id & address");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        //make the lable multiline
        jLabel6.setText("<html>*the list contains the images id of<br> the selected property</html>");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("<html>*select and item from the list to display<br> or browse an image from your computer</html>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnltitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbtype, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnShowImages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(btnRemoveImage, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddImage, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                    .addComponent(lblimage, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(pnltitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(cmbtype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                    .addComponent(lblimage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnShowImages, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveImage, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddImage, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel7)))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShowImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowImagesActionPerformed

        try
        {
            //set the property id
            int rowIndex = tblproperties.getSelectedRow();
            int id = Integer.valueOf(tblproperties.getValueAt(rowIndex, 0).toString());
            
            //check if the the property contains images
            if(lstimages.getModel().getSize() > 0)
            {
                //show the selected property images in a slider and set the id to the slider form
                ShowPropImage showimg = new ShowPropImage(id);

                showimg.setVisible(true);
                showimg.pack();
                showimg.setLocationRelativeTo(null);
                showimg.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "This property does not have any pictures to show..", "No images found", 2);
            }
            
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Select the property first..", "Property not selected", 2);
        }
        
        
    }//GEN-LAST:event_btnShowImagesActionPerformed

    private void btnRemoveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveImageActionPerformed

        try
        {
            //remove the selected image
            String selectedListItem = String.valueOf(lstimages.getSelectedValue());
            Integer imageId = Integer.valueOf(selectedListItem);
        
            //show a confirmation message before deleting the image
            int yes_or_no = JOptionPane.showConfirmDialog(rootPane, "Are you sure to delete this image", "Delete image", JOptionPane.YES_NO_OPTION);
                
            if (yes_or_no == JOptionPane.YES_OPTION) {

                    if (new P_Properties().removePropertyImage(imageId)) 
                    {
                        JOptionPane.showMessageDialog(null, "Property image deleted..", "Delete Image", 1);
                        lblimage.setIcon(null);
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Operation failed..", "Delete Image", 2);
                    }
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "No image selected..", "Delete Image", 2);
        }
    }//GEN-LAST:event_btnRemoveImageActionPerformed

    private void btnAddImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddImageActionPerformed

       //add images to the property 
       //get the property id from the table
       P_Properties property = new P_Properties();
       
       if(propertyId != 0)
       {
           if (property.addImage(propertyId, propertyImagePath)) {
               
               JOptionPane.showMessageDialog(rootPane, "Image added to this property", "Add Image", 1);
               
           } else {
               JOptionPane.showMessageDialog(rootPane, "Image not added to this property", "Add Image", 2);
           }
       }else
       {
           JOptionPane.showMessageDialog(rootPane, "Select the property first", "Property not selected", 2);
       }
       

    }//GEN-LAST:event_btnAddImageActionPerformed

    
    //create a function to resize the image to the label
    public ImageIcon resizeImage(String path, byte[] byteImage)
    {
        ImageIcon pic;
        if(byteImage != null) pic = new ImageIcon(byteImage);
        else pic = new ImageIcon(path);
        
        Image img = pic.getImage().getScaledInstance(lblimage.getWidth(), lblimage.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(img);
        return image;
    }
    
    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        
        //broese image from the computer
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select the property image");
        fileChooser.setCurrentDirectory(new File("D:\\"));
        
        //fie extension
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Images", ".jpg", ".png", ".jpeg", "webp");
        fileChooser.addChoosableFileFilter(fileFilter);
        
        int fileState = fileChooser.showSaveDialog(null);
        
        if(fileState == JFileChooser.APPROVE_OPTION)
        {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            lblimage.setIcon(resizeImage(path, null));
            propertyImagePath = path;
        }
        
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void cmbtypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbtypeActionPerformed
        
        //show properties in the table depending on the selected type
        int typeId = map.get(cmbtype.getSelectedItem().toString());
        
        P_Properties property = new P_Properties();
        ArrayList<P_Properties> propertyList = property.propertyListByType(typeId);
        
        //table columns
        String[] colNames = {"ID", "Address"};
        
        //table rows
        //propertyList.size() = size of the arraylist
        Object[][] rows = new Object[propertyList.size()][2];
        
        for(int i = 0; i<propertyList.size(); i++)
        {
            rows[i][0] = propertyList.get(i).getId();
            rows[i][1] = propertyList.get(i).getAddress();

            
        }
        
        DefaultTableModel model = new DefaultTableModel(rows,colNames);
        tblproperties.setModel(model);
    }//GEN-LAST:event_cmbtypeActionPerformed

    private void tblpropertiesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblpropertiesMouseClicked
        
        //get the property id from the table
        int rowIndex = tblproperties.getSelectedRow();
        propertyId = Integer.valueOf(tblproperties.getValueAt(rowIndex, 0).toString());
        
        //display the selected property images in the list
        fillTypeList();
        
    }//GEN-LAST:event_tblpropertiesMouseClicked

    private void lstimagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstimagesMouseClicked
        
        try
        {
            //display the selected image from the list to image label
            String selectedListItem = String.valueOf(lstimages.getSelectedValue());
            Integer imageId = Integer.valueOf(selectedListItem);
            byte[] image = new P_Properties().getImageById(imageId);
            lblimage.setIcon(resizeImage("", image));
        }
        catch(Exception ex)
        {
            //nothing to show
        }
        
    }//GEN-LAST:event_lstimagesMouseClicked

    //create a function to populate the list with selected property image id
    public void fillTypeList(){
      
        HashMap<byte[], Integer> imageList = new P_Properties().propertyImageList(propertyId);
        
        DefaultListModel listModel = new DefaultListModel();
        
        int i=0;
        
        for(Integer id: imageList.values())
        {
          listModel.add(i, id);
          i++;
        }
        lstimages.setModel(listModel);
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PropertyImages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PropertyImages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PropertyImages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PropertyImages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PropertyImages().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddImage;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnRemoveImage;
    private javax.swing.JButton btnShowImages;
    private javax.swing.JComboBox<String> cmbtype;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblimage;
    private javax.swing.JList<String> lstimages;
    private javax.swing.JPanel pnltitle;
    private javax.swing.JTable tblproperties;
    // End of variables declaration//GEN-END:variables
}
